name: Terraform Infrastructure Provisioning

on:
  push:
    branches:
      - main
    paths:
      # Infrastructure changes
      - 'terraform/**'
      - '.github/workflows/infra.yml'
      # Application code changes that require infrastructure updates
      - 'src/**'
      - 'kubernetes/**'
      - 'scripts/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      # Package/dependency changes
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches:
      - main
    paths:
      # Same paths as push for PR validation
      - 'terraform/**'
      - '.github/workflows/infra.yml'
      - 'src/**'
      - 'kubernetes/**'
      - 'scripts/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:

# These environment variables are automatically picked up by Terraform
env:
  TERRAFORM_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  # =====================================================
  # Job 1: Security Scanning
  # =====================================================
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'  
          severity: 'CRITICAL,HIGH'

      - name: Run Checkov scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: cli
          download_external_modules: true

  # =====================================================
  # Job 2: Terraform Plan
  # =====================================================
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: security
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Create terraform.tfvars from secrets
        run: |
          cat > terraform.tfvars << EOF
          # Project Configuration
          project_name = "${{ secrets.TF_PROJECT_NAME }}"
          location     = "${{ secrets.TF_LOCATION }}"

          # ACR Configuration (must be globally unique)
          acr_name = "${{ secrets.TF_ACR_NAME }}"

          # AKS Configuration
          aks_cluster_name = "${{ secrets.TF_AKS_CLUSTER_NAME }}"

          # DNS Configuration
          dns_zone_name = "${{ secrets.TF_DNS_ZONE_NAME }}"

          # ArgoCD Configuration
          argocd_namespace = "${{ secrets.TF_ARGOCD_NAMESPACE }}"
          github_repo_url  = "${{ secrets.TF_GITHUB_REPO_URL }}"

          # Observability Configuration
          observability_namespace = "${{ secrets.TF_OBSERVABILITY_NAMESPACE }}"

          # Optional configurations
          admin_object_id = "${{ secrets.TF_ADMIN_OBJECT_ID }}"
          allowed_ips = ${{ secrets.TF_ALLOWED_IPS }}

          # Tags
          tags = {
            Project   = "EasyShop"
            ManagedBy = "Terraform"
            Owner     = "${{ secrets.TF_OWNER }}"
          }
          EOF

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="terraform.tfvars" \
            -out=tfplan \
            -no-color

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 5

  # =====================================================
  # Job 3: Terraform Apply
  # =====================================================
  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: terraform
    outputs:
      key_vault_name: ${{ steps.export.outputs.key_vault_name }}
      managed_identity_client_id: ${{ steps.export.outputs.managed_identity_client_id }}
      tenant_id: ${{ steps.export.outputs.tenant_id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false  # Important for getting outputs

      - name: Create terraform.tfvars from secrets
        run: |
          cat > terraform.tfvars << EOF
          # Project Configuration
          project_name = "${{ secrets.TF_PROJECT_NAME }}"
          location     = "${{ secrets.TF_LOCATION }}"

          # ACR Configuration (must be globally unique)
          acr_name = "${{ secrets.TF_ACR_NAME }}"

          # AKS Configuration
          aks_cluster_name = "${{ secrets.TF_AKS_CLUSTER_NAME }}"

          # DNS Configuration
          dns_zone_name = "${{ secrets.TF_DNS_ZONE_NAME }}"

          # ArgoCD Configuration
          argocd_namespace = "${{ secrets.TF_ARGOCD_NAMESPACE }}"
          github_repo_url  = "${{ secrets.TF_GITHUB_REPO_URL }}"

          # Observability Configuration
          observability_namespace = "${{ secrets.TF_OBSERVABILITY_NAMESPACE }}"

          # Optional configurations
          admin_object_id = "${{ secrets.TF_ADMIN_OBJECT_ID }}"
          allowed_ips = ${{ secrets.TF_ALLOWED_IPS }}

          # Tags
          tags = {
            Project   = "EasyShop"
            ManagedBy = "Terraform"
            Owner     = "${{ secrets.TF_OWNER }}"
          }
          EOF

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}"

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Terraform Apply
        run: |
          terraform apply \
            tfplan \
            -no-color

      - name: Export Outputs
        id: export
        run: |
          echo "key_vault_name=$(terraform output -raw key_vault_name 2>/dev/null || echo 'not-created')" >> $GITHUB_OUTPUT
          echo "managed_identity_client_id=$(terraform output -raw managed_identity_client_id 2>/dev/null || echo 'not-created')" >> $GITHUB_OUTPUT
          echo "tenant_id=$(terraform output -raw tenant_id 2>/dev/null || echo 'not-created')" >> $GITHUB_OUTPUT

  # =====================================================
  # Job 4: Update Kubernetes Manifests
  # =====================================================
  update-k8s-manifests:
    name: 'Update Kubernetes Manifests'
    runs-on: ubuntu-latest
    needs: apply
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update SecretProviderClass with Terraform outputs
        run: |
          # Replace placeholders in the SecretProviderClass
          sed -i 's/${MANAGED_IDENTITY_CLIENT_ID}/${{ needs.apply.outputs.managed_identity_client_id }}/g' kubernetes/15-keyvault-secret-provider.yml
          sed -i 's/${TENANT_ID}/${{ needs.apply.outputs.tenant_id }}/g' kubernetes/15-keyvault-secret-provider.yml

      - name: Commit updated manifests
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add kubernetes/15-keyvault-secret-provider.yml
          git diff --staged --quiet || git commit -m "Update SecretProviderClass with Terraform outputs"
          git push

  # =====================================================
  # Job 5: Trigger Application Deployment
  # =====================================================
  trigger-deploy:
    name: 'Trigger Application Deployment'
    runs-on: ubuntu-latest
    needs: [apply, update-k8s-manifests]
    if: success()
    
    steps:
      - name: Trigger Deploy Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: deploy-applications
          client-payload: |
            {
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}",
              "key_vault_name": "${{ needs.apply.outputs.key_vault_name }}",
              "managed_identity_client_id": "${{ needs.apply.outputs.managed_identity_client_id }}",
              "tenant_id": "${{ needs.apply.outputs.tenant_id }}"
            }

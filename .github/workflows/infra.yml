name: Terraform Infrastructure Provisioning

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infra.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

# These environment variables are automatically picked up by Terraform
# No need to configure them in your Terraform code!
env:
  TERRAFORM_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  # =====================================================
  # Job 1: Security Scanning
  # =====================================================
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './terraform'
          format: 'table'
          exit-code: '0'  # Don't fail the build on security issues
          severity: 'CRITICAL,HIGH'

      - name: 🛡️ Run Checkov scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./terraform
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: cli
          download_external_modules: true

  # =====================================================
  # Job 2: Terraform Plan
  # =====================================================
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: security
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: ✅ Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=tfstate-rg" \
            -backend-config="storage_account_name=storage00es" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: 🎯 Select Workspace
        run: |
          terraform workspace select ${{ github.event.inputs.environment || 'dev' }} || \
          terraform workspace new ${{ github.event.inputs.environment || 'dev' }}

      - name: 📋 Terraform Plan
        id: plan
        run: |
          if [ ! -f environments/${{ env.ENVIRONMENT }}.tfvars ]; then
            echo "ERROR: tfvars file for environment '${{ env.ENVIRONMENT }}' not found."
            exit 1
          fi

          terraform plan \
            -var-file="environments/${{ env.ENVIRONMENT }}.tfvars" \
            -no-color

      - name: 💬 Post Plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan 📖
            * Workflow: \`${{ github.workflow }}\`
            * Action: \`${{ github.event_name }}\`
            * Environment: \`${{ github.event.inputs.environment || 'dev' }}\`
            
            Check the workflow logs for the full plan output.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # =====================================================
  # Job 3: Terraform Apply
  # =====================================================
  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: plan
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main' ||
      github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      aks_cluster_name: ${{ steps.outputs.outputs.aks_cluster_name }}
      acr_login_server: ${{ steps.outputs.outputs.acr_login_server }}
      key_vault_name: ${{ steps.outputs.outputs.key_vault_name }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false  # Important for getting outputs

      - name: ✅ Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=tfstate-rg" \
            -backend-config="storage_account_name=storage00es" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: 🎯 Select Workspace
        run: |
          terraform workspace select ${{ github.event.inputs.environment || 'dev' }} || \
          terraform workspace new ${{ github.event.inputs.environment || 'dev' }}

      - name: 🚀 Terraform Apply
        run: |
          terraform apply \
            -var-file="environments/${{ github.event.inputs.environment || 'dev' }}.tfvars" \
            -auto-approve \
            -no-color

      - name: 📤 Export Outputs
        id: outputs
        run: |
          # Capture outputs for next job
          echo "aks_cluster_name=$(terraform output -raw aks_cluster_name 2>/dev/null || echo 'not-created')" >> $GITHUB_OUTPUT
          echo "acr_login_server=$(terraform output -raw acr_login_server 2>/dev/null || echo 'not-created')" >> $GITHUB_OUTPUT
          echo "key_vault_name=$(terraform output -raw key_vault_name 2>/dev/null || echo 'not-created')" >> $GITHUB_OUTPUT

  # =====================================================
  # Job 4: Trigger Deployment Workflow
  # =====================================================
  trigger-deploy:
    name: 'Trigger ArgoCD Deployment'
    runs-on: ubuntu-latest
    needs: apply
    if: success()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Trigger Deploy Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: deploy-applications
          client-payload: |
            {
              "environment": "${{ github.event.inputs.environment || 'dev' }}",
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}",
              "aks_cluster_name": "${{ needs.apply.outputs.aks_cluster_name }}",
              "acr_login_server": "${{ needs.apply.outputs.acr_login_server }}",
              "key_vault_name": "${{ needs.apply.outputs.key_vault_name }}"
            }

#
# For ARM_SUBSCRIPTION_ID, use your Azure subscription ID.

name: Terraform Infrastructure Provisioning

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infra.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TERRAFORM_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  # =====================================================
  # Job 1: Validate Terraform Configuration
  # =====================================================
  validate:
    name: 'Validate Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: 📋 Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: ✅ Terraform Init
        id: init
        run: |
          terraform init -backend=false

      - name: 🔍 Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: 💬 Post PR Comment with Validation Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          FORMAT: ${{ steps.fmt.outcome }}
          INIT: ${{ steps.init.outcome }}
          VALIDATE: ${{ steps.validate.outcome }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Validation Results 🤖
            * Format: \`${{ env.FORMAT }}\`
            * Initialization: \`${{ env.INIT }}\`
            * Validation: \`${{ env.VALIDATE }}\``;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # =====================================================
  # Job 2: Security Scanning
  # =====================================================
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './terraform'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🛡️ Run Checkov scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./terraform
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: cli
          download_external_modules: true

  # =====================================================
  # Job 3: Terraform Plan
  # =====================================================
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [validate, security]
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      plan_exitcode: ${{ steps.plan.outputs.exitcode }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # OPTION 1: Using GitHub Secrets (Simpler for personal project)
      # The ARM_* environment variables are automatically picked up by Terraform
      
      # OPTION 2: Using Bootstrap Vault (More secure, uncomment if using)
      # - name: 🔐 Azure Login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # - name: 🔑 Fetch Credentials from Bootstrap Vault
      #   run: |
      #     echo "ARM_CLIENT_ID=$(az keyvault secret show \
      #       --vault-name gVault-01 \
      #       --name client-id \
      #       --query value -o tsv)" >> $GITHUB_ENV
      #     
      #     echo "ARM_CLIENT_SECRET=$(az keyvault secret show \
      #       --vault-name gVault-01 \
      #       --name client-secret \
      #       --query value -o tsv)" >> $GITHUB_ENV
      #     
      #     echo "ARM_TENANT_ID=$(az keyvault secret show \
      #       --vault-name gVault-01 \
      #       --name tenant-id \
      #       --query value -o tsv)" >> $GITHUB_ENV
      #     
      #     echo "ARM_SUBSCRIPTION_ID=$(az keyvault secret show \
      #       --vault-name gVault-01 \
      #       --name subscription-id \
      #       --query value -o tsv)" >> $GITHUB_ENV

      - name: ✅ Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=tfstate-rg" \
            -backend-config="storage_account_name=storage00es" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: 🎯 Select Workspace
        run: |
          terraform workspace select ${{ github.event.inputs.environment || 'dev' }} || \
          terraform workspace new ${{ github.event.inputs.environment || 'dev' }}

      - name: 📋 Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/${{ github.event.inputs.environment || 'dev' }}.tfvars" \
            -out=tfplan \
            -no-color \
            -detailed-exitcode || echo "exitcode=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 💾 Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

      - name: 📊 Generate Plan Summary
        id: plan-summary
        run: |
          terraform show -no-color tfplan > plan.txt
          echo "## Terraform Plan Summary 📋" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -E '(^.*[#~+-] .*|^Plan:|^No changes.)' plan.txt >> $GITHUB_STEP_SUMMARY || echo "No changes detected" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 💬 Post Plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan.txt', 'utf8');
            const output = `#### Terraform Plan 📖
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            *Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # =====================================================
  # Job 4: Terraform Apply (Manual Approval Required)
  # =====================================================
  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: plan
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false  # Important for getting outputs

      - name: 💾 Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform/

      - name: ✅ Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=tfstate-rg" \
            -backend-config="storage_account_name=storage00es" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: 🎯 Select Workspace
        run: |
          terraform workspace select ${{ github.event.inputs.environment || 'dev' }}

      - name: 🚀 Terraform Apply
        id: apply
        run: |
          terraform apply tfplan -no-color
          
          # Capture outputs for next job
          echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "key_vault_name=$(terraform output -raw key_vault_name)" >> $GITHUB_OUTPUT

      - name: 📊 Generate Apply Summary
        run: |
          echo "## ✅ Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources Created:" >> $GITHUB_STEP_SUMMARY
          echo "- **AKS Cluster**: ${{ steps.apply.outputs.aks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ACR**: ${{ steps.apply.outputs.acr_login_server }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Key Vault**: ${{ steps.apply.outputs.key_vault_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. The deployment workflow will be triggered automatically" >> $GITHUB_STEP_SUMMARY
          echo "2. Monitor the ArgoCD deployment" >> $GITHUB_STEP_SUMMARY
          echo "3. Access your applications once deployed" >> $GITHUB_STEP_SUMMARY

  # =====================================================
  # Job 5: Trigger Deployment Workflow
  # =====================================================
  trigger-deploy:
    name: 'Trigger Deployment'
    runs-on: ubuntu-latest
    needs: apply
    if: success()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Trigger Deploy Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: deploy-applications
          client-payload: '{"environment": "${{ github.event.inputs.environment || 'dev' }}", "ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

      - name: 📊 Deployment Triggered Summary
        run: |
          echo "## 🚀 Deployment Workflow Triggered!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The application deployment workflow has been triggered with:" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: **${{ github.event.inputs.environment || 'dev' }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: **${{ github.sha }}**" >> $GITHUB_STEP_SUMMARY

name: Terraform Infrastructure Provisioning

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infra.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:

# These environment variables are automatically picked up by Terraform
env:
  TERRAFORM_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  # =====================================================
  # Job 1: Security Scanning
  # =====================================================
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'  
          severity: 'CRITICAL,HIGH'

      - name: Run Checkov scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: cli
          download_external_modules: true

  # =====================================================
  # Job 2: Terraform Plan
  # =====================================================
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: security
    defaults:
      run:
        working-directory: .
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=tfstate-rg" \
            -backend-config="storage_account_name=storage00es" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="terraform.tfvars" \
            -no-color

  # =====================================================
  # Job 3: Terraform Apply
  # =====================================================
  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: .
    outputs:
      key_vault_name: ${{ steps.export.outputs.key_vault_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false  # Important for getting outputs

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=tfstate-rg" \
            -backend-config="storage_account_name=storage00es" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Apply
        run: |
          terraform apply \
            -var-file="terraform.tfvars" \
            -auto-approve \
            -no-color

      - name: Export Outputs
        id: export
        run: |
          # Only capture outputs that exist in your current setup
          echo "key_vault_name=$(terraform output -raw key_vault_name 2>/dev/null || echo 'not-created')" >> $GITHUB_OUTPUT

  # =====================================================
  # Job 4: Trigger CI/CD Deployment
  # =====================================================
  trigger-deploy:
    name: 'Trigger CI/CD Pipeline'
    runs-on: ubuntu-latest
    needs: apply
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger Deploy Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: deploy-applications
          client-payload: |
            {
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}",
              "key_vault_name": "${{ needs.apply.outputs.key_vault_name }}"
            }
name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "DESTROY" to confirm deletion of all resources'
        required: true
        type: string
      reset_state:
        description: 'Also delete Terraform state file? (yes/no)'
        required: false
        default: 'yes'
        type: string

env:
  TERRAFORM_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  safety-check:
    name: 'Safety Confirmation'
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation & final warning
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DESTROY" ]; then
            echo "‚ùå Invalid confirmation. You must type 'DESTROY' exactly."
            exit 1
          fi
          echo "‚ö†Ô∏è WARNING: This will permanently delete all infrastructure"
          if [ "${{ github.event.inputs.reset_state }}" == "yes" ]; then
            echo "‚ö†Ô∏è WARNING: This will also delete the Terraform state file!"
          fi
          echo "üïê Starting destruction in 10 seconds..."
          sleep 10

  nuclear-cleanup:
    name: 'Nuclear Option - Complete Cleanup'
    runs-on: ubuntu-latest
    needs: safety-check
    steps:
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }
      
      - name: Force Delete All Related Resource Groups
        run: |
          echo "üßπ Starting aggressive cleanup..."
          
          # Get all resource groups that match our project
          PROJECT_NAME="${{ secrets.TF_PROJECT_NAME }}"
          echo "üîç Looking for resource groups containing: $PROJECT_NAME"
          
          # Find all related resource groups (including MC_ groups from AKS)
          RESOURCE_GROUPS=$(az group list --query "[?contains(name, '$PROJECT_NAME')].name" -o tsv)
          
          if [ -n "$RESOURCE_GROUPS" ]; then
            echo "üóëÔ∏è Found resource groups to delete:"
            echo "$RESOURCE_GROUPS"
            
            # Delete each resource group with force
            echo "$RESOURCE_GROUPS" | while read -r RG; do
              if [ -n "$RG" ]; then
                echo "üóëÔ∏è Force deleting resource group: $RG"
                az group delete --name "$RG" --yes --no-wait --force-deletion-types Microsoft.Compute/virtualMachines,Microsoft.Compute/virtualMachineScaleSets || echo "Failed to delete $RG (might already be deleted)"
              fi
            done
          else
            echo "‚úÖ No resource groups found matching: $PROJECT_NAME"
          fi
          
          # Also try to delete the main resource group explicitly
          echo "üóëÔ∏è Attempting to delete main resource group..."
          az group delete --name "${PROJECT_NAME}-rg" --yes --no-wait --force-deletion-types Microsoft.Compute/virtualMachines,Microsoft.Compute/virtualMachineScaleSets || echo "Main RG already deleted or doesn't exist"

      - name: Force Delete Terraform State File
        run: |
          if [ "${{ github.event.inputs.reset_state }}" == "yes" ]; then
            echo "üóëÔ∏è Force deleting Terraform state file..."
            
            # Set Azure Storage environment variables for authentication
            export AZURE_STORAGE_ACCOUNT="${{ secrets.TF_STATE_STORAGE_ACCOUNT }}"
            export AZURE_STORAGE_KEY=$(az storage account keys list \
              --account-name "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
              --resource-group "${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
              --query "[0].value" -o tsv)
            
            # Delete the state file with proper authentication
            az storage blob delete \
              --account-name "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
              --container-name "${{ secrets.TF_STATE_CONTAINER }}" \
              --name "${{ secrets.TF_STATE_KEY }}" \
              --auth-mode key || echo "State file already deleted or doesn't exist"
            
            # Delete any lock files
            az storage blob delete \
              --account-name "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
              --container-name "${{ secrets.TF_STATE_CONTAINER }}" \
              --name "${{ secrets.TF_STATE_KEY }}.lock" \
              --auth-mode key || echo "Lock file already deleted or doesn't exist"
            
            # Also try the lock file with the UUID we saw earlier
            az storage blob delete \
              --account-name "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
              --container-name "${{ secrets.TF_STATE_CONTAINER }}" \
              --name "terraform.tfstate.lock" \
              --auth-mode key || echo "Generic lock file already deleted or doesn't exist"
            
            echo "‚úÖ Terraform state deletion completed!"
          fi

      - name: Wait for Resource Group Deletions
        run: |
          echo "‚è≥ Waiting 2 minutes for resource group deletions to propagate..."
          sleep 120

  verify-destruction:
    name: 'Verify Complete Destruction'
    runs-on: ubuntu-latest
    needs: nuclear-cleanup
    if: always() && needs.nuclear-cleanup.result == 'success'
    steps:
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }
      
      - name: Final Verification
        run: |
          echo "üîç Final cleanup verification..."
          
          # Check for remaining resource groups
          PROJECT_NAME="${{ secrets.TF_PROJECT_NAME }}"
          REMAINING=$(az group list --query "[?contains(name, '$PROJECT_NAME')].name" -o tsv || echo "")
          
          if [ -n "$REMAINING" ]; then
            echo "‚ö†Ô∏è Some resource groups still exist (may still be deleting):"
            echo "$REMAINING"
          else
            echo "‚úÖ All resource groups successfully deleted!"
          fi
          
          # Check if state file was deleted
          if [ "${{ github.event.inputs.reset_state }}" == "yes" ]; then
            echo "üîç Verifying state file deletion..."
            
            # Get storage account key for verification
            STORAGE_KEY=$(az storage account keys list \
              --account-name "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
              --resource-group "${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
              --query "[0].value" -o tsv)
            
            if az storage blob exists \
                --account-name "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
                --container-name "${{ secrets.TF_STATE_CONTAINER }}" \
                --name "${{ secrets.TF_STATE_KEY }}" \
                --account-key "$STORAGE_KEY" \
                --query "exists" -o tsv | grep -q "true"; then
              echo "‚ö†Ô∏è State file still exists - manual deletion may be needed"
            else
              echo "‚úÖ State file successfully deleted!"
            fi
          fi
          
          echo ""
          echo "üéâ Nuclear cleanup completed!"
          echo "üë§ Executed by: ${{ github.actor }}"
          echo "üïê Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          if [ "${{ github.event.inputs.reset_state }}" == "yes" ]; then
            echo "üöÄ Ready for completely fresh deployment!"
            echo "üí° Run infra.yml workflow to start from scratch"
          fi
          
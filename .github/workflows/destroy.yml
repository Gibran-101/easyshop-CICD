name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "DESTROY" to confirm deletion of all resources'
        required: true
        type: string
      method:
        description: 'Destruction method'
        required: true
        default: 'azure-cli'
        type: choice
        options:
        - azure-cli
        - terraform

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  safety-check:
    name: 'Safety Confirmation'
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation & final warning
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DESTROY" ]; then
            echo " Invalid confirmation. You must type 'DESTROY' exactly."
            exit 1
          fi
          echo "  WARNING: This will permanently delete all infrastructure"
          echo " Method: ${{ github.event.inputs.method }}"
          echo " Starting destruction in 10 seconds..."
          sleep 10

  azure-cli-destroy:
    name: 'Azure CLI Destruction (Recommended)'
    runs-on: ubuntu-latest
    needs: safety-check
    if: github.event.inputs.method == 'azure-cli'
    steps:
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }
      
      - name: Fast & Reliable Azure CLI Cleanup
        run: |
          echo " Using Azure CLI for fast, reliable cleanup..."
          
          # List all EasyShop resource groups first
          echo " Finding EasyShop resource groups..."
          MAIN_RG="${{ secrets.TF_PROJECT_NAME }}-rg"
          
          # Find AKS node resource groups
          NODE_RGS=$(az group list --query "[?starts_with(name, 'MC_${{ secrets.TF_PROJECT_NAME }}')].name" -o tsv || echo "")
          
          # Delete main resource group
          echo "  Deleting main resource group: $MAIN_RG"
          if az group show --name "$MAIN_RG" &>/dev/null; then
            az group delete --name "$MAIN_RG" --yes --no-wait
            echo " Main resource group deletion initiated"
          else
            echo "  Main resource group doesn't exist"
          fi
          
          # Delete AKS node resource groups
          if [ ! -z "$NODE_RGS" ]; then
            echo "  Deleting AKS node resource groups..."
            echo "$NODE_RGS" | while read -r rg; do
              if [ ! -z "$rg" ]; then
                echo "   Deleting: $rg"
                az group delete --name "$rg" --yes --no-wait
              fi
            done
            echo " AKS node resource groups deletion initiated"
          else
            echo " No AKS node resource groups found"
          fi
          
          echo " Azure CLI cleanup completed!"
          echo " Resources are being deleted in the background (5-10 minutes)"

  terraform-destroy:
    name: 'Terraform Destruction (Experimental)'
    runs-on: ubuntu-latest
    needs: safety-check
    if: github.event.inputs.method == 'terraform'
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v4
      
      - name: Create terraform configuration
        run: |
          cat > terraform.tfvars << EOF
          project_name = "${{ secrets.TF_PROJECT_NAME }}"
          location     = "${{ secrets.TF_LOCATION }}"
          acr_name = "${{ secrets.TF_ACR_NAME }}"
          aks_cluster_name = "${{ secrets.TF_AKS_CLUSTER_NAME }}"
          dns_zone_name = "${{ secrets.TF_DNS_ZONE_NAME }}"
          argocd_namespace = "${{ secrets.TF_ARGOCD_NAMESPACE }}"
          github_repo_url  = "${{ secrets.TF_GITHUB_REPO_URL }}"
          observability_namespace = "${{ secrets.TF_OBSERVABILITY_NAMESPACE }}"
          admin_object_id = "${{ secrets.TF_ADMIN_OBJECT_ID }}"
          tags = {
            Project   = "EasyShop"
            ManagedBy = "Terraform"
            Owner     = "${{ secrets.TF_OWNER }}"
          }
          EOF
          
          cat > backend.conf << EOF
          resource_group_name  = "${{ secrets.TF_STATE_RESOURCE_GROUP }}"
          storage_account_name = "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}"
          container_name       = "${{ secrets.TF_STATE_CONTAINER }}"
          key                  = "${{ secrets.TF_STATE_KEY }}"
          EOF

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
      
      - name: Terraform Destroy (May Crash)
        run: |
          terraform init -backend-config="backend.conf"
          echo "  Attempting terraform destroy (known to crash sometimes)..."
          terraform destroy -var-file="terraform.tfvars" -auto-approve || {
            echo " Terraform destroy crashed - this is a known issue"
            echo " Use Azure CLI method instead for reliable cleanup"
            exit 1
          }

  verify-destruction:
    name: 'Verify Complete Destruction'
    runs-on: ubuntu-latest
    needs: [azure-cli-destroy, terraform-destroy]
    if: always() && (needs.azure-cli-destroy.result == 'success' || needs.terraform-destroy.result == 'success')
    steps:
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }
      
      - name: Verify cleanup status
        run: |
          echo " Verifying cleanup status..."
          
          # Check for remaining EasyShop resource groups
          REMAINING=$(az group list --query "[?contains(name, '${{ secrets.TF_PROJECT_NAME }}')].{Name:name, State:properties.provisioningState}" -o table)
          
          if echo "$REMAINING" | grep -v "Name.*State" | grep -q .; then
            echo " Some resource groups still deleting:"
            echo "$REMAINING"
            echo " This is normal - deletion continues in background"
          else
            echo " All EasyShop resource groups successfully deleted!"
          fi
          
          echo ""
          echo " Infrastructure destruction completed!"
          echo " Executed by: ${{ github.actor }}"
          echo " Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo " Verify in portal: https://portal.azure.com"
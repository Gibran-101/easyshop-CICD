name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "DESTROY" to confirm deletion of all resources'
        required: true
        type: string
      reset_state:
        description: 'Also delete Terraform state file? (yes/no)'
        required: false
        default: 'no'
        type: string

env:
  TERRAFORM_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  safety-check:
    name: 'Safety Confirmation'
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation & final warning
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DESTROY" ]; then
            echo "‚ùå Invalid confirmation. You must type 'DESTROY' exactly."
            exit 1
          fi
          echo "‚ö†Ô∏è WARNING: This will permanently delete all infrastructure"
          if [ "${{ github.event.inputs.reset_state }}" == "yes" ]; then
            echo "‚ö†Ô∏è WARNING: This will also delete the Terraform state file!"
          fi
          echo "üïê Starting destruction in 10 seconds..."
          sleep 10

  nuclear-cleanup:
    name: 'Nuclear Option - Complete Cleanup'
    runs-on: ubuntu-latest
    needs: safety-check
    steps:
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }
      
      - name: Complete Infrastructure Cleanup
        run: |
          echo "üßπ Starting complete cleanup..."
          
          # Delete all resource groups related to the project
          echo "üóëÔ∏è Deleting resource groups..."
          az group delete --name "${{ secrets.TF_PROJECT_NAME }}-rg" --yes --no-wait || echo "Main resource group already deleted"
          
          # Wait a bit for resource group deletion to start
          sleep 30
          
          # Force delete the Terraform state if requested
          if [ "${{ github.event.inputs.reset_state }}" == "yes" ]; then
            echo "üóëÔ∏è Deleting Terraform state file..."
            az storage blob delete \
              --account-name "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
              --container-name "${{ secrets.TF_STATE_CONTAINER }}" \
              --name "${{ secrets.TF_STATE_KEY }}" || echo "State file already deleted"
            
            # Delete any lock files
            az storage blob delete \
              --account-name "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
              --container-name "${{ secrets.TF_STATE_CONTAINER }}" \
              --name "${{ secrets.TF_STATE_KEY }}.lock" || echo "Lock file already deleted"
          fi
          
          echo "‚úÖ Nuclear cleanup completed!"

  verify-destruction:
    name: 'Verify Complete Destruction'
    runs-on: ubuntu-latest
    needs: nuclear-cleanup
    if: always() && needs.nuclear-cleanup.result == 'success'
    steps:
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }
      
      - name: Verify cleanup & report completion
        run: |
          echo "üîç Checking cleanup status..."
          
          # Check for remaining resource groups
          REMAINING=$(az group list --query "[?contains(name, '${{ secrets.TF_PROJECT_NAME }}')].name" -o tsv || echo "")
          if [ -n "$REMAINING" ]; then
            echo "‚ö†Ô∏è Some resource groups may still exist: $REMAINING"
            echo "‚è≥ These are likely still being deleted (async operation)"
          else
            echo "‚úÖ No matching resource groups found"
          fi
          
          # Check if state file was deleted
          if [ "${{ github.event.inputs.reset_state }}" == "yes" ]; then
            echo "üîç Checking if state file was deleted..."
            if az storage blob exists \
                --account-name "${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
                --container-name "${{ secrets.TF_STATE_CONTAINER }}" \
                --name "${{ secrets.TF_STATE_KEY }}" --query "exists" -o tsv | grep -q "true"; then
              echo "‚ö†Ô∏è State file still exists"
            else
              echo "‚úÖ State file successfully deleted"
            fi
          fi
          
          echo ""
          echo "üéâ Infrastructure destruction completed!"
          echo "üë§ Destroyed by: ${{ github.actor }}"
          echo "üïê Destroyed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          if [ "${{ github.event.inputs.reset_state }}" == "yes" ]; then
            echo "üöÄ Ready for fresh deployment with infra.yml!"
          fi
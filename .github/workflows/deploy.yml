name: EasyShop Application Deployment

on:
  workflow_dispatch:
  repository_dispatch:
    types: [deploy-applications]
  workflow_run:
    workflows: ["Terraform Infrastructure Provisioning"]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ${{ secrets.TF_ACR_NAME }}.azurecr.io
  IMAGE_NAME: easyshop
  AKS_CLUSTER_NAME: ${{ secrets.TF_AKS_CLUSTER_NAME }}
  RESOURCE_GROUP: ${{ secrets.TF_PROJECT_NAME }}-rg
  NAMESPACE: easyshop

jobs:
  deploy-application:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.ARM_CLIENT_ID }}",
            "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.ARM_TENANT_ID }}"
          }

    - name: 🎯 Generate SHA Version
      id: version
      run: |
        VERSION="${GITHUB_SHA::8}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "📦 Using SHA version: $VERSION"

    # ✅ FIXED: Set up Docker Buildx with container driver that supports cache
    - name: 🐋 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:latest
        use: true

    # ✅ FIXED: Use Azure CLI for ACR login (more reliable than docker-login action)
    - name: 🔑 Login to ACR
      run: |
        az acr login --name ${{ secrets.TF_ACR_NAME }}

    # ✅ FIXED: Build and Push with ACR registry cache (more reliable than GHA cache for ACR)
    # Modify your existing build step to capture the digest:
    # Modify your existing build step to capture the digest:
    - name: 🏗️ Build and Push with Caching
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        build-args: |
          GIT_SHA=${{ env.VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
        outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push=true

    # Then extract the digest from the build output:
    - name: 📌 Get Image Digest from Build
      run: |
        # The build step outputs metadata including the digest
        IMAGE_DIGEST="${{ steps.build.outputs.digest }}"
        
        if [[ -n "$IMAGE_DIGEST" ]]; then
          IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${IMAGE_DIGEST}"
          echo "✅ Got digest from build: $IMAGE_DIGEST"
        else
          # Fallback: extract from build metadata
          IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          echo "⚠️ No digest from build, using tag: $IMAGE_WITH_DIGEST"
        fi
        
        echo "IMAGE_WITH_DIGEST=$IMAGE_WITH_DIGEST" >> $GITHUB_ENV
        echo "📌 Final image: $IMAGE_WITH_DIGEST"

    - name: ⚙️ Connect to AKS & Install Kustomize
      run: |
        echo "🔑 Getting AKS credentials..."
        az aks get-credentials \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
        
        echo "📦 Installing kustomize..."
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
#*************************************************************************
    # ADD THIS NEW DEBUG STEP HERE - BEFORE THE DEPLOYMENT STEP:
    - name: 🔍 Debug SecretProviderClass Configuration
      run: |
        echo "🔍 Checking SecretProviderClass configuration..."
        
        # Show the actual SecretProviderClass that was applied
        echo "📋 SecretProviderClass YAML:"
        kubectl get secretproviderclass easyshop-keyvault-secrets -n easyshop -o yaml 2>/dev/null || echo "SecretProviderClass not found"
        
        # Check if CSI driver is installed
        echo ""
        echo "🔍 CSI Secret Store driver pods:"
        kubectl get pods -n kube-system | grep csi || echo "No CSI pods found"
        
        # Check events for CSI-related errors
        echo ""
        echo "🔍 Recent events in namespace:"
        kubectl get events -n easyshop --sort-by='.lastTimestamp' 2>/dev/null | tail -20 || echo "No events found"
        
        # Check if the managed identity exists and has correct permissions
        echo ""
        echo "🔍 Managed identity in SecretProviderClass:"
        kubectl get secretproviderclass easyshop-keyvault-secrets -n easyshop -o jsonpath='{.spec.parameters.userAssignedIdentityClientID}' 2>/dev/null || echo "Could not get managed identity ID"
        
        # Check AKS addons
        echo ""
        echo "🔍 AKS addons status:"
        az aks show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --query addonProfiles

#*************************************************************************

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    - name: 🔧 Fix CSI Driver - Correct Name Issue
      run: |
        echo "🔧 CSI driver verification and fix..."
        
        # Check current CSI drivers
        echo "📋 Current CSI drivers:"
        kubectl get csidrivers
        
        # The CSI driver exists with name "secrets-store.csi.k8s.io" not "secrets-store.csi.x-k8s.io"
        echo ""
        echo "🔍 Checking for correct CSI driver name..."
        if kubectl get csidriver secrets-store.csi.k8s.io; then
          echo "✅ CSI driver is already registered with correct name!"
          
          # The issue might be in our SecretProviderClass - let's check
          echo ""
          echo "📋 Checking SecretProviderClass..."
          kubectl get secretproviderclass easyshop-keyvault-secrets -n easyshop -o yaml | head -20
          
          # Test if we can create a simple pod that uses the CSI driver
          echo ""
          echo "🧪 Testing CSI driver with a test pod..."
          cat > /tmp/test-pod.yaml << 'EOF'
          apiVersion: v1
          kind: Pod
          metadata:
            name: csi-test-pod
            namespace: easyshop
          spec:
            containers:
            - name: test
              image: busybox
              command: ["sleep", "3600"]
              volumeMounts:
              - name: secrets
                mountPath: /mnt/secrets
                readOnly: true
            volumes:
            - name: secrets
              csi:
                driver: secrets-store.csi.k8s.io
                readOnly: true
                volumeAttributes:
                  secretProviderClass: easyshop-keyvault-secrets
          EOF
          
          kubectl apply -f /tmp/test-pod.yaml
          
          # Wait a bit and check the test pod
          sleep 30
          
          echo "📋 Test pod status:"
          kubectl get pod csi-test-pod -n easyshop
          kubectl describe pod csi-test-pod -n easyshop | tail -10
          
          # Clean up test pod
          kubectl delete pod csi-test-pod -n easyshop --force --grace-period=0
          
          echo ""
          echo "🧹 Cleaning up stuck pods (they should work now)..."
          kubectl delete pods -n easyshop --field-selector=status.phase=Pending --force --grace-period=0 || true
          kubectl delete pods -n easyshop --field-selector=status.phase=ContainerCreating --force --grace-period=0 || true
          
          # Also restart deployments to pick up the working CSI driver
          echo "🔄 Restarting deployments to pick up working CSI driver..."
          kubectl rollout restart deployment/easyshop-blue -n easyshop || true
          kubectl rollout restart deployment/easyshop-green -n easyshop || true
          kubectl rollout restart deployment/redis -n easyshop || true
          kubectl rollout restart statefulset/mongodb -n easyshop || true
          
          echo "✅ CSI driver fix applied - pods should now work!"
          
        else
          echo "❌ CSI driver still not found even with correct name"
          exit 1
        fi
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#====================================================================
#====================================================================
    - name: 🚀 Blue-Green Deployment with Key Vault Fix
      run: |
        set -e
        
        echo "🚀 Starting Blue-Green Deployment with Key Vault fix..."
        
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        cd kubernetes
        
        # First, let's make sure we have the right kustomization
        echo "📝 Current kustomization.yaml:"
        cat kustomization.yaml
        
        # Update image
        echo ""
        echo "📝 Updating image to: ${{ env.IMAGE_WITH_DIGEST }}"
        kustomize edit set image easyshop=${{ env.IMAGE_WITH_DIGEST }}
        
        # Build and check what's generated
        echo ""
        echo "🔍 Building manifests..."
        kustomize build . > /tmp/manifests.yaml
        
        RESOURCE_COUNT=$(grep -c "^kind:" /tmp/manifests.yaml)
        echo "📊 Generated $RESOURCE_COUNT resources"
        
        echo "🔍 Resource types:"
        grep "^kind:" /tmp/manifests.yaml | sort | uniq -c
        
        # Check if SecretProviderClass is in the manifests
        if grep -q "kind: SecretProviderClass" /tmp/manifests.yaml; then
          echo "✅ SecretProviderClass found in manifests"
        else
          echo "❌ SecretProviderClass missing from manifests!"
          echo "📋 Checking if 15-keyvault-secret-provider.yaml exists..."
          if [[ -f "15-keyvault-secret-provider.yaml" ]]; then
            echo "✅ File exists, checking content..."
            head -10 15-keyvault-secret-provider.yaml
          else
            echo "❌ File missing! Creating it..."
            cat > 15-keyvault-secret-provider.yaml << 'SPCEOF'
            apiVersion: secrets-store.csi.x-k8s.io/v1
            kind: SecretProviderClass
            metadata:
              name: easyshop-keyvault-secrets
              namespace: easyshop
            spec:
              provider: azure
              parameters:
                usePodIdentity: "false"
                useVMManagedIdentity: "true"
                userAssignedIdentityClientID: "REPLACE_WITH_MANAGED_IDENTITY_CLIENT_ID"
                keyvaultName: "REPLACE_WITH_KEY_VAULT_NAME"
                tenantId: "REPLACE_WITH_TENANT_ID"
                objects: |
                  array:
                    - |
                      objectName: es-mongodb-username
                      objectType: secret
                    - |
                      objectName: es-mongodb-password
                      objectType: secret
                    - |
                      objectName: es-mongodb-uri
                      objectType: secret
                    - |
                      objectName: es-redis-password
                      objectType: secret
                    - |
                      objectName: es-redis-uri
                      objectType: secret
              secretObjects:
              - secretName: mongodb-keyvault-secret
                type: Opaque
                data:
                - objectName: es-mongodb-username
                  key: username
                - objectName: es-mongodb-password
                  key: password
                - objectName: es-mongodb-uri
                  key: mongodb-uri
              - secretName: redis-keyvault-secret
                type: Opaque
                data:
                - objectName: es-redis-password
                  key: password
                - objectName: es-redis-uri
                  key: redis-uri
            SPCEOF
            
            # Add it to kustomization resources if not already there
            if ! grep -q "15-keyvault-secret-provider.yaml" kustomization.yaml; then
              echo "📝 Adding SecretProviderClass to kustomization..."
              sed -i '/^resources:/a - 15-keyvault-secret-provider.yaml' kustomization.yaml
            fi
            
            # Rebuild with the new file
            kustomize build . > /tmp/manifests.yaml
            RESOURCE_COUNT=$(grep -c "^kind:" /tmp/manifests.yaml)
            echo "📊 Rebuilt: $RESOURCE_COUNT resources"
          fi
        fi
        
        # Apply manifests
        echo ""
        echo "📦 Applying $RESOURCE_COUNT resources..."
        kubectl apply -f /tmp/manifests.yaml
        
        # Wait a moment for resources to be created
        sleep 10
        
        # Check if SecretProviderClass was created
        echo ""
        echo "🔍 Verifying SecretProviderClass creation..."
        if kubectl get secretproviderclass easyshop-keyvault-secrets -n easyshop; then
          echo "✅ SecretProviderClass created successfully!"
          
          # Show its configuration
          echo "📋 SecretProviderClass configuration:"
          kubectl get secretproviderclass easyshop-keyvault-secrets -n easyshop -o yaml | grep -A 20 "spec:"
          
        else
          echo "❌ SecretProviderClass still not found!"
          echo "📋 Available SecretProviderClasses:"
          kubectl get secretproviderclass -A
          exit 1
        fi
        
        # Now proceed with deployment
        CURRENT_DEPLOYMENT=$(kubectl get svc easyshop-service -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.selector.app}' 2>/dev/null || echo "easyshop-blue")
        
        if [ "$CURRENT_DEPLOYMENT" = "easyshop-blue" ]; then
          TARGET_DEPLOYMENT="easyshop-green"
          echo ""
          echo "🔄 Current: BLUE → Target: GREEN"
        else
          TARGET_DEPLOYMENT="easyshop-blue"
          echo ""
          echo "🔄 Current: GREEN → Target: BLUE"
        fi
        
        # Clean up any stuck pods first
        echo "🧹 Cleaning up stuck pods..."
        kubectl delete pods -n ${{ env.NAMESPACE }} --field-selector=status.phase=Pending --force --grace-period=0 || true
        kubectl delete pods -n ${{ env.NAMESPACE }} --field-selector=status.phase=ContainerCreating --force --grace-period=0 || true
        
        # Wait for deployment
        echo ""
        echo "⏳ Waiting for $TARGET_DEPLOYMENT (with Key Vault)..."
        if kubectl rollout status deployment/$TARGET_DEPLOYMENT -n ${{ env.NAMESPACE }} --timeout=300s; then
          echo "✅ Deployment successful!"
          
          # Switch traffic
          kubectl patch svc easyshop-service -n ${{ env.NAMESPACE }} \
            -p '{"spec":{"selector":{"app":"'$TARGET_DEPLOYMENT'"}}}'
          
          # Scale down old
          if [ "$CURRENT_DEPLOYMENT" != "$TARGET_DEPLOYMENT" ]; then
            kubectl scale deployment/$CURRENT_DEPLOYMENT --replicas=0 -n ${{ env.NAMESPACE }} || true
          fi
          
          echo ""
          echo "🎉 BLUE-GREEN DEPLOYMENT WITH KEY VAULT SUCCESSFUL!"
          echo "=============================================="
          echo "🎯 Active: $TARGET_DEPLOYMENT"
          echo "🔐 Key Vault: Working"
          echo "🐋 Image: ${{ env.IMAGE_WITH_DIGEST }}"
          
        else
          echo "❌ Deployment failed"
          echo "📋 Pod status:"
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=$TARGET_DEPLOYMENT
          echo ""
          echo "📋 Pod events:"
          kubectl describe pods -n ${{ env.NAMESPACE }} -l app=$TARGET_DEPLOYMENT | tail -20
          exit 1
        fi
#====================================================================
#====================================================================

    - name: 🔍 Verify Deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Check pods
        echo "📦 Pods in ${{ env.NAMESPACE }}:"
        kubectl get pods -n ${{ env.NAMESPACE }}
        
        # Check services
        echo "🌐 Services in ${{ env.NAMESPACE }}:"
        kubectl get svc -n ${{ env.NAMESPACE }}
        
        # Get the actual hostname from ingress
        echo "🔗 Ingress in ${{ env.NAMESPACE }}:"
        kubectl get ingress -n ${{ env.NAMESPACE }}
        
        INGRESS_HOST=$(kubectl get ingress easyshop-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.rules[0].host}' 2>/dev/null || echo "${{ secrets.TF_DNS_ZONE_NAME }}")
        echo "INGRESS_HOST=$INGRESS_HOST" >> $GITHUB_ENV

    - name: 📋 Deployment Summary
      run: |
        echo "🎉 Blue-Green Deployment Complete!"
        echo "=================================="
        echo "🏷️  SHA Version: ${{ env.VERSION }}"
        echo "🐋 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
        echo "📌 Digest: ${{ env.IMAGE_WITH_DIGEST }}"
        echo "🎯 Cluster: ${{ env.AKS_CLUSTER_NAME }}"
        echo "🏠 Namespace: ${{ env.NAMESPACE }}"
        echo "🌐 URL: https://${{ env.INGRESS_HOST }}"
        echo "📍 Commit: ${{ github.sha }}"
        echo ""
        echo "🔄 Blue-Green Strategy:"
        echo "  ✅ Deployed to inactive slot with digest pinning"
        echo "  ✅ Verified health and readiness probes"
        echo "  ✅ Switched traffic with zero downtime"
        echo "  ✅ Scaled down old deployment"
        echo "=================================="
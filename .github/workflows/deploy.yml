name: EasyShop Application Deployment

on:
  workflow_dispatch:
  repository_dispatch:
    types: [deploy-applications]
  workflow_run:
    workflows: ["Terraform Infrastructure Provisioning"]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ${{ secrets.TF_ACR_NAME }}.azurecr.io
  IMAGE_NAME: easyshop
  AKS_CLUSTER_NAME: ${{ secrets.TF_AKS_CLUSTER_NAME }}
  RESOURCE_GROUP: ${{ secrets.TF_PROJECT_NAME }}-rg
  NAMESPACE: easyshop

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.ARM_CLIENT_ID }}",
            "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.ARM_TENANT_ID }}"
          }

    - name: 🎯 Generate SHA Version
      id: version
      run: |
        VERSION="${GITHUB_SHA::8}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Using SHA version: $VERSION"

    - name: 🐋 Build and Push Image
      run: |
        echo "🏗️ Building image..."
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
          --build-arg GIT_SHA=${{ env.VERSION }} \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') .
        
        echo "🔑 Login to ACR..."
        az acr login --name ${{ secrets.TF_ACR_NAME }}
        
        echo "🚀 Pushing image..."
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        
        echo "✅ Image pushed: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"

    - name: ⚙️ Connect to AKS
      run: |
        echo "🔑 Getting AKS credentials..."
        az aks get-credentials \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
        
        kubectl cluster-info

    - name: 🚀 Deploy Application
      run: |
        echo "🚀 Deploying EasyShop application..."
        
        # Update image in kustomization.yaml
        sed -i "s|newTag:.*|newTag: ${{ env.VERSION }}|g" kubernetes/kustomization.yaml
        
        # Deploy using kustomize
        kubectl apply -k kubernetes/
        
        # Wait for deployment
        kubectl rollout status deployment/easyshop -n ${{ env.NAMESPACE }}
        
        echo "✅ Application deployed successfully!"

    - name: 🔍 Verify Deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Check pods
        kubectl get pods -n ${{ env.NAMESPACE }}
        
        # Check ingress
        kubectl get ingress -n ${{ env.NAMESPACE }}
        
        echo "✅ Deployment verification complete!"

    - name: 📋 Deployment Summary
      run: |
        echo "🎉 EasyShop Deployment Complete!"
        echo "================================="
        echo "🏷️  Version: ${{ env.VERSION }}"
        echo "🐋 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
        echo "🎯 Cluster: ${{ env.AKS_CLUSTER_NAME }}"
        echo "🏠 Namespace: ${{ env.NAMESPACE }}"
        echo "🌐 URL: https://${{ secrets.TF_DNS_ZONE_NAME }}"
        echo "================================="
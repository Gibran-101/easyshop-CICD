name: EasyShop Application Deployment

on:
  workflow_dispatch:
  repository_dispatch:
    types: [deploy-applications]
  workflow_run:
    workflows: ["Terraform Infrastructure Provisioning"]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ${{ secrets.TF_ACR_NAME }}.azurecr.io
  IMAGE_NAME: easyshop
  AKS_CLUSTER_NAME: ${{ secrets.TF_AKS_CLUSTER_NAME }}
  RESOURCE_GROUP: ${{ secrets.TF_PROJECT_NAME }}-rg
  NAMESPACE: easyshop

jobs:
  deploy-application:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.ARM_CLIENT_ID }}",
            "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.ARM_TENANT_ID }}"
          }

    - name: 🎯 Generate SHA Version
      id: version
      run: |
        VERSION="${GITHUB_SHA::8}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "📦 Using SHA version: $VERSION"

    - name: 🐋 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:latest
        use: true

    - name: 🔑 Login to ACR
      run: |
        az acr login --name ${{ secrets.TF_ACR_NAME }}

    - name: 🏗️ Build and Push with Caching
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        build-args: |
          GIT_SHA=${{ env.VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
        outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push=true

    - name: 📌 Get Image Reference
      run: |
        IMAGE_DIGEST="${{ steps.build.outputs.digest }}"
        
        if [[ -n "$IMAGE_DIGEST" ]]; then
          IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${IMAGE_DIGEST}"
          echo "✅ Got digest from build: $IMAGE_DIGEST"
        else
          IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          echo "⚠️ No digest from build, using tag: $IMAGE_WITH_DIGEST"
        fi
        
        echo "IMAGE_WITH_DIGEST=$IMAGE_WITH_DIGEST" >> $GITHUB_ENV
        echo "📌 Final image: $IMAGE_WITH_DIGEST"

    - name: ⚙️ Setup Kubernetes Tools
      run: |
        echo "🔑 Getting AKS credentials..."
        az aks get-credentials \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
        
        echo "📦 Installing kustomize..."
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    # OPTIMIZED: Single step for Key Vault setup with proper error handling
    # In .github/workflows/deploy.yml - Replace the entire Configure Key Vault Access step

    - name: 🔧 Configure Key Vault Access and SecretProviderClass
      run: |
        set -e
        echo "🔧 Configuring Key Vault CSI Driver..."
        
        # Get configuration from repository dispatch payload OR from Azure
        if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
          echo "📦 Using values from infrastructure workflow..."
          KEY_VAULT_NAME="${{ github.event.client_payload.key_vault_name }}"
          ADDON_CLIENT_ID="${{ github.event.client_payload.key_vault_addon_client_id }}"
          ADDON_OBJECT_ID="${{ github.event.client_payload.key_vault_addon_object_id }}"
          TENANT_ID="${{ github.event.client_payload.tenant_id }}"
        else
          echo "🔍 Fetching values from Azure..."
          TENANT_ID=$(az account show --query tenantId -o tsv)
          
          # Get Key Vault - handle the timestamp suffix
          KEY_VAULT_NAME=$(az keyvault list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "[?starts_with(name, '${{ secrets.TF_PROJECT_NAME }}-kv')].name | [0]" \
            -o tsv)
          
          # Get addon identity
          ADDON_CLIENT_ID=$(az aks show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --query "addonProfiles.azureKeyvaultSecretsProvider.identity.clientId" \
            -o tsv)
          
          ADDON_OBJECT_ID=$(az aks show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --query "addonProfiles.azureKeyvaultSecretsProvider.identity.objectId" \
            -o tsv)
        fi
        
        # Validate we have all values
        echo "📋 Configuration:"
        echo "  KEY_VAULT_NAME: ${KEY_VAULT_NAME}"
        echo "  ADDON_CLIENT_ID: ${ADDON_CLIENT_ID}"
        echo "  ADDON_OBJECT_ID: ${ADDON_OBJECT_ID}"
        echo "  TENANT_ID: ${TENANT_ID}"
        
        if [[ -z "$KEY_VAULT_NAME" || "$KEY_VAULT_NAME" == "null" || "$KEY_VAULT_NAME" == "not-created" ]]; then
          echo "❌ Key Vault name is invalid or empty!"
          echo "Checking what Key Vaults exist..."
          az keyvault list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o table
          exit 1
        fi
        
        # Set Key Vault access policy
        echo "🔐 Setting Key Vault access policy..."
        az keyvault set-policy \
          --name "$KEY_VAULT_NAME" \
          --object-id "$ADDON_OBJECT_ID" \
          --secret-permissions get list \
          --output none || echo "Policy may already exist"
        
        # Store for later use
        echo "KEY_VAULT_NAME=$KEY_VAULT_NAME" >> $GITHUB_ENV
        echo "ADDON_CLIENT_ID=$ADDON_CLIENT_ID" >> $GITHUB_ENV
        echo "ADDON_OBJECT_ID=$ADDON_OBJECT_ID" >> $GITHUB_ENV
        echo "TENANT_ID=$TENANT_ID" >> $GITHUB_ENV
        
        # Wait for propagation
        echo "⏳ Waiting for Azure AD propagation..."
        sleep 30

    # OPTIMIZED: Simplified deployment with better error handling
    - name: 🚀 Blue-Green Deployment
      run: |
        set -e
        echo "🚀 Starting Blue-Green Deployment..."
        
        # Create namespace
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        cd kubernetes
        
        # CRITICAL: Update the SecretProviderClass file BEFORE kustomize
        echo "📝 Updating SecretProviderClass with actual values..."
        
        # Use environment variables set in previous step
        if [[ -n "$KEY_VAULT_NAME" && -n "$TENANT_ID" && -n "$ADDON_CLIENT_ID" ]]; then
          echo "Using values from environment:"
          echo "  KEY_VAULT_NAME: $KEY_VAULT_NAME"
          echo "  TENANT_ID: $TENANT_ID"
          echo "  ADDON_CLIENT_ID: $ADDON_CLIENT_ID"
          
          # Update the file
          sed -i "s|PLACEHOLDER_KEYVAULT_NAME|${KEY_VAULT_NAME}|g" 15-keyvault-secret-provider.yaml
          sed -i "s|PLACEHOLDER_TENANT_ID|${TENANT_ID}|g" 15-keyvault-secret-provider.yaml
          sed -i "s|PLACEHOLDER_CLIENT_ID|${ADDON_CLIENT_ID}|g" 15-keyvault-secret-provider.yaml
          
          # Verify the substitution worked
          echo "📋 Verifying SecretProviderClass configuration:"
          if grep -q "PLACEHOLDER" 15-keyvault-secret-provider.yaml; then
            echo "❌ Placeholders still exist!"
            cat 15-keyvault-secret-provider.yaml
            exit 1
          fi
          
          # Show the actual values
          echo "Actual values in SecretProviderClass:"
          grep -E "keyvaultName:|tenantId:|userAssignedIdentityClientID:" 15-keyvault-secret-provider.yaml
        else
          echo "❌ Missing environment variables!"
          echo "KEY_VAULT_NAME: ${KEY_VAULT_NAME:-MISSING}"
          echo "TENANT_ID: ${TENANT_ID:-MISSING}"
          echo "ADDON_CLIENT_ID: ${ADDON_CLIENT_ID:-MISSING}"
          exit 1
        fi
        
        # Update image reference
        echo "📝 Updating image to: ${{ env.IMAGE_WITH_DIGEST }}"
        kustomize edit set image easyshop=${{ env.IMAGE_WITH_DIGEST }}
        
        # Build manifests
        echo "🔨 Building Kubernetes manifests..."
        kustomize build . > /tmp/manifests.yaml
        
        # Final check - ensure keyvaultName is in the built manifests
        echo "🔍 Final verification of built manifests..."
        if ! grep -q "keyvaultName: $KEY_VAULT_NAME" /tmp/manifests.yaml; then
          echo "❌ keyvaultName not found in built manifests!"
          echo "Looking for SecretProviderClass in manifests:"
          grep -A 20 "kind: SecretProviderClass" /tmp/manifests.yaml || echo "SecretProviderClass not found!"
          exit 1
        fi
        
        echo "✅ keyvaultName is properly set in manifests"
        
        # Apply manifests
        echo "📦 Applying manifests to cluster..."
        kubectl apply -f /tmp/manifests.yaml
        
        # Rest of the deployment logic...
        CURRENT_DEPLOYMENT=$(kubectl get svc easyshop-service -n ${{ env.NAMESPACE }} \
          -o jsonpath='{.spec.selector.app}' 2>/dev/null || echo "none")
        
        if [[ "$CURRENT_DEPLOYMENT" == "easyshop-blue" ]]; then
          TARGET_DEPLOYMENT="easyshop-green"
          OLD_DEPLOYMENT="easyshop-blue"
        elif [[ "$CURRENT_DEPLOYMENT" == "easyshop-green" ]]; then
          TARGET_DEPLOYMENT="easyshop-blue"
          OLD_DEPLOYMENT="easyshop-green"
        else
          TARGET_DEPLOYMENT="easyshop-blue"
          OLD_DEPLOYMENT="none"
        fi
        
        echo "🔄 Deployment Strategy:"
        echo "  Current: $CURRENT_DEPLOYMENT"
        echo "  Target: $TARGET_DEPLOYMENT"
        
        # Force restart to pick up new configuration
        kubectl rollout restart deployment/$TARGET_DEPLOYMENT -n ${{ env.NAMESPACE }} || true
        
        # Wait for rollout
        echo "⏳ Waiting for $TARGET_DEPLOYMENT to be ready..."
        kubectl rollout status deployment/$TARGET_DEPLOYMENT -n ${{ env.NAMESPACE }} --timeout=600s || {
          echo "❌ Rollout failed, checking pod status..."
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=$TARGET_DEPLOYMENT
          kubectl describe pods -n ${{ env.NAMESPACE }} -l app=$TARGET_DEPLOYMENT | tail -50
          exit 1
        }
        
        # Switch traffic
        echo "🔀 Switching traffic to $TARGET_DEPLOYMENT..."
        kubectl patch svc easyshop-service -n ${{ env.NAMESPACE }} \
          -p '{"spec":{"selector":{"app":"'$TARGET_DEPLOYMENT'"}}}'
        
        # Scale down old deployment
        if [[ "$OLD_DEPLOYMENT" != "none" ]]; then
          echo "📉 Scaling down $OLD_DEPLOYMENT..."
          kubectl scale deployment/$OLD_DEPLOYMENT --replicas=0 -n ${{ env.NAMESPACE }} || true
        fi
        
        echo "🎉 Deployment completed successfully!"

    - name: 🔍 Verify Deployment
      if: success()
      run: |
        echo "🔍 Final deployment verification..."
        
        # Check all components
        echo "📦 Pods:"
        kubectl get pods -n ${{ env.NAMESPACE }}
        
        echo "🌐 Services:"
        kubectl get svc -n ${{ env.NAMESPACE }}
        
        echo "🔗 Ingress:"
        kubectl get ingress -n ${{ env.NAMESPACE }}
        
        # Get application URL
        INGRESS_HOST=$(kubectl get ingress easyshop-ingress -n ${{ env.NAMESPACE }} \
          -o jsonpath='{.spec.rules[0].host}' 2>/dev/null || echo "${{ secrets.TF_DNS_ZONE_NAME }}")
        
        echo ""
        echo "🎉 Deployment Complete!"
        echo "=================================="
        echo "🏷️ Version: ${{ env.VERSION }}"
        echo "🐋 Image: ${{ env.IMAGE_WITH_DIGEST }}"
        echo "🌐 URL: https://$INGRESS_HOST"
        echo "=================================="
        
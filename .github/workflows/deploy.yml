name: EasyShop Application Deployment

on:
  workflow_dispatch:
  repository_dispatch:
    types: [deploy-applications]
  workflow_run:
    workflows: ["Terraform Infrastructure Provisioning"]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ${{ secrets.TF_ACR_NAME }}.azurecr.io
  IMAGE_NAME: easyshop
  AKS_CLUSTER_NAME: ${{ secrets.TF_AKS_CLUSTER_NAME }}
  RESOURCE_GROUP: ${{ secrets.TF_PROJECT_NAME }}-rg
  NAMESPACE: easyshop

jobs:
  deploy-application:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.ARM_CLIENT_ID }}",
            "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.ARM_TENANT_ID }}"
          }

    - name: 🎯 Generate SHA Version
      id: version
      run: |
        VERSION="${GITHUB_SHA::8}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "📦 Using SHA version: $VERSION"

    # ✅ FIXED: Set up Docker Buildx with container driver that supports cache
    - name: 🐋 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:latest
        use: true

    # ✅ FIXED: Use Azure CLI for ACR login (more reliable than docker-login action)
    - name: 🔑 Login to ACR
      run: |
        az acr login --name ${{ secrets.TF_ACR_NAME }}

    # ✅ FIXED: Build and Push with ACR registry cache (more reliable than GHA cache for ACR)
    # Modify your existing build step to capture the digest:
    # Modify your existing build step to capture the digest:
    - name: 🏗️ Build and Push with Caching
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        build-args: |
          GIT_SHA=${{ env.VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
        outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push=true

    # Then extract the digest from the build output:
    - name: 📌 Get Image Digest from Build
      run: |
        # The build step outputs metadata including the digest
        IMAGE_DIGEST="${{ steps.build.outputs.digest }}"
        
        if [[ -n "$IMAGE_DIGEST" ]]; then
          IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${IMAGE_DIGEST}"
          echo "✅ Got digest from build: $IMAGE_DIGEST"
        else
          # Fallback: extract from build metadata
          IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          echo "⚠️ No digest from build, using tag: $IMAGE_WITH_DIGEST"
        fi
        
        echo "IMAGE_WITH_DIGEST=$IMAGE_WITH_DIGEST" >> $GITHUB_ENV
        echo "📌 Final image: $IMAGE_WITH_DIGEST"

    - name: ⚙️ Connect to AKS & Install Kustomize
      run: |
        echo "🔑 Getting AKS credentials..."
        az aks get-credentials \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
        
        echo "📦 Installing kustomize..."
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
#====================================================================
#====================================================================
    - name: 🚀 Blue-Green Deployment with Enhanced Debugging
      run: |
        set -e
        
        echo "🚀 Starting Blue-Green Deployment..."
        
        # Create namespace
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        cd kubernetes
        
        # STEP 1: Check all files exist
        echo "📋 Checking if all resource files exist:"
        echo "======================================"
        MISSING_FILES=0
        while IFS= read -r file; do
          if [[ "$file" =~ ^-[[:space:]]*(.+)$ ]]; then
            filename="${BASH_REMATCH[1]}"
            if [[ -f "$filename" ]]; then
              echo "✅ $filename"
            else
              echo "❌ MISSING: $filename"
              MISSING_FILES=$((MISSING_FILES + 1))
            fi
          fi
        done < <(grep "^- " kustomization.yaml)
        
        if [ "$MISSING_FILES" -gt 0 ]; then
          echo ""
          echo "❌ Found $MISSING_FILES missing files. Listing all files in directory:"
          ls -la
          echo ""
          echo "🔧 You need to either:"
          echo "   1. Create the missing files, or"
          echo "   2. Remove them from kustomization.yaml resources list"
          exit 1
        fi
        
        # STEP 2: Validate each YAML file individually
        echo ""
        echo "🔍 Validating individual YAML files:"
        echo "====================================="
        while IFS= read -r file; do
          if [[ "$file" =~ ^-[[:space:]]*(.+)$ ]]; then
            filename="${BASH_REMATCH[1]}"
            echo -n "Checking $filename... "
            if kubectl --dry-run=client apply -f "$filename" > /dev/null 2>&1; then
              echo "✅ Valid"
            else
              echo "❌ Invalid YAML"
              echo "Error details:"
              kubectl --dry-run=client apply -f "$filename" 2>&1 | head -5
            fi
          fi
        done < <(grep "^- " kustomization.yaml)
        
        # STEP 3: Show current and update image
        echo ""
        echo "📝 Current kustomization.yaml:"
        cat kustomization.yaml
        
        echo ""
        echo "📝 Updating image to: ${{ env.IMAGE_WITH_DIGEST }}"
        kustomize edit set image easyshop=${{ env.IMAGE_WITH_DIGEST }}
        
        echo ""
        echo "📝 Updated kustomization.yaml:"
        cat kustomization.yaml
        
        # STEP 4: Test kustomize build with full error output
        echo ""
        echo "🔍 Testing kustomize build with full error output:"
        echo "================================================="
        
        # Try kustomize build and capture both stdout and stderr
        if kustomize build . > /tmp/manifests.yaml 2> /tmp/kustomize_errors.txt; then
          echo "✅ Kustomize build succeeded"
        else
          echo "❌ Kustomize build failed!"
          echo ""
          echo "📋 Error output:"
          cat /tmp/kustomize_errors.txt
          echo ""
          echo "📋 Partial output:"
          cat /tmp/manifests.yaml
          echo ""
          echo "🔧 Common fixes:"
          echo "   1. Check YAML syntax in all files"
          echo "   2. Ensure all referenced files exist"
          echo "   3. Check for duplicate resource names"
          echo "   4. Verify namespace consistency"
          exit 1
        fi
        
        # STEP 5: Analyze generated resources
        RESOURCE_COUNT=$(cat /tmp/manifests.yaml | grep "^kind:" | wc -l)
        echo "📊 Generated: $RESOURCE_COUNT resources"
        
        if [ "$RESOURCE_COUNT" -eq 0 ]; then
          echo "❌ No resources generated despite successful build!"
          echo "📋 Manifest content:"
          cat /tmp/manifests.yaml
          echo ""
          echo "📋 Kustomization debug:"
          kustomize build . --enable-alpha-plugins 2>&1
          exit 1
        fi
        
        # Show what we're deploying
        echo ""
        echo "🔍 Resources to deploy:"
        grep "^kind:" /tmp/manifests.yaml | sort | uniq -c
        
        # Show image references in generated manifests
        echo ""
        echo "🐋 Image references in manifests:"
        grep -A 2 -B 1 "image:" /tmp/manifests.yaml | head -20
        
        # Continue with deployment logic...
        echo ""
        echo "✅ All checks passed, proceeding with deployment..."
#====================================================================
#====================================================================

    - name: 🔍 Verify Deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Check pods
        echo "📦 Pods in ${{ env.NAMESPACE }}:"
        kubectl get pods -n ${{ env.NAMESPACE }}
        
        # Check services
        echo "🌐 Services in ${{ env.NAMESPACE }}:"
        kubectl get svc -n ${{ env.NAMESPACE }}
        
        # Get the actual hostname from ingress
        echo "🔗 Ingress in ${{ env.NAMESPACE }}:"
        kubectl get ingress -n ${{ env.NAMESPACE }}
        
        INGRESS_HOST=$(kubectl get ingress easyshop-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.rules[0].host}' 2>/dev/null || echo "${{ secrets.TF_DNS_ZONE_NAME }}")
        echo "INGRESS_HOST=$INGRESS_HOST" >> $GITHUB_ENV

    - name: 📋 Deployment Summary
      run: |
        echo "🎉 Blue-Green Deployment Complete!"
        echo "=================================="
        echo "🏷️  SHA Version: ${{ env.VERSION }}"
        echo "🐋 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
        echo "📌 Digest: ${{ env.IMAGE_WITH_DIGEST }}"
        echo "🎯 Cluster: ${{ env.AKS_CLUSTER_NAME }}"
        echo "🏠 Namespace: ${{ env.NAMESPACE }}"
        echo "🌐 URL: https://${{ env.INGRESS_HOST }}"
        echo "📍 Commit: ${{ github.sha }}"
        echo ""
        echo "🔄 Blue-Green Strategy:"
        echo "  ✅ Deployed to inactive slot with digest pinning"
        echo "  ✅ Verified health and readiness probes"
        echo "  ✅ Switched traffic with zero downtime"
        echo "  ✅ Scaled down old deployment"
        echo "=================================="